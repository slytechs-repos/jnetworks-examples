/*
 * Sly Technologies Free License
 * 
 * Copyright 2023 Sly Technologies Inc.
 *
 * Licensed under the Sly Technologies Free License (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.slytechs.com/free-license-text
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.slytechs.jnetworks.examples;

import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import com.slytechs.jnetworks.HashMode;
import com.slytechs.jnetworks.HostStream.PacketStream;
import com.slytechs.jnetworks.NetException;
import com.slytechs.jnetworks.network.Network;
import com.slytechs.jnetworks.network.Network.Configuration;
import com.slytechs.jnetworks.pcap.PcapFilter;
import com.slytechs.jnetworks.pcap.PcapNetwork;
import com.slytechs.jnetworks.network.PacketCapture;
import com.slytechs.jnetworks.util.concurrent.StructuredNetScope;
import com.slytechs.protocol.Packet;
import com.slytechs.protocol.pack.core.Ethernet;
import com.slytechs.protocol.pack.core.Ip4;
import com.slytechs.protocol.pack.core.Tcp;
import com.slytechs.protocol.pack.web.Html;
import com.slytechs.protocol.pack.web.Http;
import com.slytechs.protocol.runtime.NotFound;

/**
 * Example showing how to capture offline packets and dispatch to a user packet
 * handler of type {@code PcapProHandler.OfPacket} and set a new packet
 * formatter so that the string generated by call to {@code Packet.toString()}
 * is nicely formatted with all the requested detail.
 */
public class Example7_HttpDechunking {
	/**
	 * Bootstrap the example.
	 *
	 * @param args ignored
	 * @throws NotFound
	 * @throws NetException
	 * @throws PcapException any pcap exceptions
	 */
	public static void main(String[] args) throws NetException, NotFound {
		new Example7_HttpDechunking().main();
	}

	private final Ip4 ip4 = new Ip4();
	private final Tcp tcp = new Tcp();
	private final Http http = new Http();
	private final Html html = new Html();

	/**
	 * Example instance
	 * 
	 * @throws NotFound
	 * @throws NetException
	 */
	void main() throws NetException, NotFound {
		/* Datalink and Network layer service */
		try (Network network = new PcapNetwork()) {

			try (Configuration config = network.configuration()) {
				config.selectPorts("enp0s25", "lo", "bluetooth0");

				config.assignTraffic(0, 3)
						.color(7)
						.hash(HashMode.HASH_5TUPLE)
						.filter(new PcapFilter("ip and device port {0,1}"));
			}

			try (PacketCapture capture = network.packetCapture()) {
				PacketStream[] streams = capture.getStreamsInRange(0, 3);

				try (var scope = new StructuredNetScope.CloseOnStop<PacketStream>()) {

					// Stream worker thread
					scope.fork(streams, stream -> {
						Ethernet ethernet = new Ethernet();
						Ip4 ip4 = new Ip4();
						Tcp tcp = new Tcp();
						Http http = new Http();
						Html html = new Html();

						try {
							while (stream.isOpen()) {
								Packet packet = stream.get(1, TimeUnit.SECONDS);

								if (packet.hasHeader(ethernet))
									System.out.println(ethernet);

								if (packet.hasHeader(ip4) && ip4.isReassembled())
									System.out.println(ip4.reassembledFragments());

								if (packet.hasHeader(tcp) && tcp.isReassembled())
									System.out.println(tcp.reaseembledSegments());

								if (packet.hasHeader(http) && http.isDechunked())
									System.out.println(http.dechunkedData());

								if (packet.hasHeader(http) && http.isDecompressed())
									System.out.println(http.decompressedData());

								if (packet.hasHeader(html))
									System.out.println(html.text());

								System.out.println(packet);

								stream.release(packet);
							}
						} catch (InterruptedException | TimeoutException e) {}

					}); // End of worker thread

					scope.joinUntil(5, TimeUnit.MINUTES);

				} // Close structured scope - wait for capture stop
			} // Close PacketCapture
		}

	}
}
